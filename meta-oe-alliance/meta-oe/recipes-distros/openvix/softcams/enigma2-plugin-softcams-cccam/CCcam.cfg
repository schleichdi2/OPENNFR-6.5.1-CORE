##################################################
#CCcam.cfg deutsch v3.0 19.07.2009

#Erklärung:

#Alles was in einer Zeile hinter einer # steht wird von CCcam ignoriert und #dient nur zur Kommentierung oder Außerkraftsetzung einer Einstellung.


#Soll CCcam eine

# Einstellung, F: oder C: Line annehmen, so muss die # entfernt werden.
# Alle Zeilen in dieser Config die hinter der # kein Leerzeichen haben sind
# Beispiele für eine mögliche Einstellung.
#
# In einigen Einstellungen muss man eine Option "ein" oder "aus" schalten. Je nach
# Einstellung wählt man entweder 1 oder yes für "an" oder 0 oder no für "aus". Ob
# man in einer bestimmten Einstellung 0/1 oder yes/no nutzen muss, lässt sich aus
# den Kommentierungen entnehmen.
#
# Als einen Hop bezeichnet man die Entfernung der Karte. Karten die in unserer Box
# stecken sind für uns auf Hop0. Karten die in der Box eines direkt zu uns
# verbundenen Freundes stecken sind für uns auf Hop1. Karten die dieser Freund auf
# Hop1 hat, erreichen uns auf Hop2. Und so weiter. Je näher die Karte ist, um so
# besser und schneller kann sie uns die benötigten CWs liefern. Also macht es
# keinen Sinn Karten aus Hop4 oder 5 zu nutzen, da diese schon durch zu viele
# Server wandern mussten bis sie zu uns durch gekommen sind.
#
# GANZ WICHTIG:
# BEIM CARDSHARING ZÄHLT NICHT DIE MASSE DER KARTEN IM SHARE, SONDERN DIE
# QUALITÄT! LIEBER 2 GUTE KARTEN EINES PROVIDERS, ALS 20 LANGSAME AUF HOP4 oder 5.
# ZU VIELE KARTEN BELASTEN DEN SHARE UNNÖTIG UND FÜHREN ZU SCHLECHTEREN
# UMSCHALTZEITEN, UNNÖTIGEM NETZWERKTRAFFIC UND HÄUFIGEN AUSFÄLLEN BIS HIN ZU
# SYSTEMABSTÜRZEN.
# Beachte dazu die Begrenzungen in den C: Lines. (siehe Beispiele weiter unten)
#
# Zur Einstellung dieser Config muss unbedingt ein Editor benutzt werden, welcher
# das Linux-Format bei behält. Windows-Usern empfehle ich Proton32.
# Linux-User nehmen einfach ihren Lieblings-Editor.

################################################## #################################
# Freunde #
################################################## #################################
#
# Hier tragen wir Freunde ein, die sich zu uns verbinden dürfen, also Karten von
# uns bekommen sollen und/oder Zugriff auf unser Key-File bekommen sollen.
# Teilen des Keyfiles (Standard = 1), EMM erlauben (Standard = 1), und optional
# die Downshare-Begrenzung pro Share (Standard = Keine Begrenzung) und optional
# die Downshare-Begrenzung pro Share basierend auf caid:id:sid
# und optional das Zeitfenster in welchem der Share gültig ist und optional einen
# Hostname oder eine IP-Adresse, auf die der Zugang beschränkt sein soll.
# Wenn kein Zeitfenster gewählt wir, wird 24 Stunden am Tag geshared.
# Emus werden immer nur einen Hop weiter geshared, auch wenn keine Begrenzung
# gesetzt wurde.
#
# Die maximale Länge für den Usernamen beträgt 20 Zeichen.
# Die Passwortlänge ist unbegrenzt.
#
# Der Username ist keine IP oder Hostname. Es handelt sich bei der F: Line
# lediglich um Zugangsdaten zu unserem CCcam-Server.
#
# F: <Username> <Passwort> <uphops> <Emus sharen> <EMM erlauben> ( { caid:id(:downhops), caid:id(:downhops), ... }
{ caid:id:sid, caid:id:sid, ... } { Anfangszeit-Endzeit, ... } ) Hostname/IP-Adresse
#
# Beispiele für verschiedene Möglichkeiten:
#
# F: user1 pass1
#
# user1 bekommt alle Karten von uns, bis maximal 5 Hops von uns entfernt.
# (unsere lokale Karte/n + virtuelle Karten, die maximal 5 Hops entfernt sind). Er kann unsere Karten an seine Freunde
# weiter geben. Er kann außerdem Keys aus unserem Keyfile erhalten (wenn er ein 'yes' hinter seiner C: hat)
# und er darf uns EMM (Updates für unsere Karten) senden.
#
# F: user2 pass2 0 1 0 { 0100:000080, 0622:000000:1, 0500:000000:2 }
#
# user2 bekommt nur unsere lokalen Karten, aber nicht die 0100:000080.
# Unsere 0622:000000 Karte/n kann er nur für sich selbst nutzen (1 hop down)
# und die 0500 Karten für sich selbst plus einen zusätzlichen Hop weiter. (2 hops down)
# Er hat außerdem Zugriff auf die Keys unseres Keyfiles, und darf uns keine EMM senden.
#
# F: user3 pass3 5 0 1 { 0:0:3, 0100:000080:1 }
#
# user3 bekommt alle Karten, die maximal 5 Hops von uns entfernt sind
# und ist berechtigt diese Karten 2 Hops hinter sich weiter zu geben.
# Er ist nicht berechtigt die 0100:000080 an andere User weiter zu geben.
# Er bekommt keine Keys aus unserem Keyfile, und er darf uns EMM senden.
#
# F: user4 pass4 5 0 1 { 0:0:4, 0100:000080:1 } { 0100:000080:15df }
#
# user4 bekommt alle Karten, die maximal 5 Hops von uns entfernt sind
# und ist berechtigt diese Karten 3 Hops hinter sich weiter zu geben.
# Er ist nicht berechtigt die 0100:000080 an andere User weiter zu geben.
# Er ist nicht berechtigt den Kanal 0100:000080:15df zu sehen. (Er bekommt ihn zumindest nicht von uns)
#
# F: user5 pass5 4 0 1 { } { } { 12:00-17:00, 19:00-20:00 }
#
# user5 bekommt alle Karten, die maximal 4 Hops von uns entfernt sind.
# Der Share ist begrenzt auf die Zeit zwischen 12:00 und 17:00 Uhr und zwischen 19:00 und 20:00 Uhr.
# Außerhalb dieser Zeitfenster werden keine CWs an den User gesendet.
#
#
# F: user6 pass6 3 1 1 { } { } { } 192.168.1.1
#
# user6 bekommt alle Karten, die maximal 3 Hops von uns entfernt sind.
# Er darf sich nur von der IP 192.168.1.1 verbinden.
#
# Wichtig:
# In der F: Line lässt sich sehr einfach begrenzen wie weit unsere Karten weiter gegeben werden können.
# Wenn viele Anfragen an unsere Karten gestellt werden, so macht dies unsere Karten natürlich langsamer
# und es kann zu Bildaussetzern (Freezern) kommen. Dies passiert gerade bei NDS-Karten sehr schnell.
# Damit unsere Freunde unsere Karten nicht zu weit weitergeben können, begrenzen wir den Reshare-Level.
# Hinter jeder F: Line setzen wir die allgemeine Begrenzung in die {}. Dazu nehmen wir nullen als
# Platzhalter für CAID und ID (0 = alle). Ein Bespiel dafür sehen wir weiter oben in der F: Line von
# user3. Hinter seiner F: Line befindet sich in den {} "0:0:3". Das bedeutet, dass alle Karten unseres
# Servers nur noch 3 Hops weiter gegeben werden dürfen. Der erste Hop ist user3, der zweite Hop sind
# alle User die mit user3 verbunden sind, der dritte Hop sind alle User, die mit den Usern von user3
# verbunden sind.
# Man sieht leicht wie schnell sich die Anzahl der User für unsere Karten durch dieses Schneeballsystem
# erhöhen kann. Ich empfehle den Reshare auf 2 Hops zu begrenzen. Also { 0:0:2 }.
# Dies lässt sich auch in den "GLOBAL LIMITS" Einstellungen weiter unten in dieser Config für alle
# F: Lines auf einmal einstellen. Somit ist dies in den F: Lines nicht mehr notwendig.
#
################################################## #################################
# Verbindungen #
################################################## #################################
#
# Hier tragen wir Server ein, von denen wir Karten und/oder Keys erhalten wollen.
# Also die Freunde, die für uns in ihrer Config eine F: Line eingetragen haben.
# "yes" am Ende um den Emu des Peers mit zu benutzen. (Non Public privat Key/Emu,...)
# Dies funktioniert aber nur mit passender F: Line in der Config des Peers.
# Optional Begrenzungen genau wie in der F: Line, aber für eingehende Shares.
# (Shares ignorieren, die mehr als X Hops entfernt sind)
#
# C: <Hostname> <Port> <Username> <Passwort> <Keyfile des Freundes mit benutzen> ( { caid:id(:uphops), caid:id(:uphops), ... } )
#
# Bemerkung: Wenn {} Begrenzungen gesetzt werden, kann <Keyfile des Freundes erwünscht> nicht weggelassen werden.
# Es muss dann yes oder no angegeben werden!
#
# Beispiele:
#
# C: server1.dyndns.org 12000 user1 pass1
# Verbindet zu einem CCcam-Server ohne den Emu des Servers mit zu benutzen.
#
# C: 192.168.1.2 12000 user2 pass2 yes
# Verbindet zu einem CCcam-Server und der Emu des Servers wird mit benutzt. (sofern vom Server erlaubt)
#
# Wichtig:
# Um nicht unnötig viele Karten zu bekommen, die unseren Share nur belasten und eh nicht richtig funktionieren,
# begrenzen wir hinter jeder C: Line die Entfernung, aus der wir uns unsere Karten holen.
# Das machen wir ähnlich wie in der Reshare-Level Begrenzung in der F: Line (s.o.).
# Am Anfang, wenn wir unseren Share erst noch aufbauen müssen und erst zu ein paar Servern verbunden sind,
# ist es noch sinnvoll Karten aus Hop 3, eventuell sogar Hop 4 zu beziehen.
# Sobald wir aber besser sortiert sind, so sollten nur noch Karten aus Hop 2 bezogen werden.
# Das funktioniert ganz einfach mit 0:0:2 in {} hinter jeder C: Line um auf Hop 2 zu begrenzen oder aber
# 0:0:3 um auf Hop 3 zu begrenzen. Ein yes oder no für <Keyfile des Freundes erwünscht> vor {} darf in der
# C: Line dann aber nicht vergessen werden!
#
# C: 192.168.1.2 12000 user3 pass3 no { 0:0:2 }
# Verbindet zu einem CCcam-Server ohne den Emu des Servers mit zu benutzen.
# Es werden nur Karten angenommen, die höchstens 2 Hops entfernt sind.
#
# Wenn wir 3 Vollabo-Karten eines Providers in Hop 1 in unserem Share haben, so sind wir mit diesem Provider
# bestens bedient und brauchen keine weiteren Karten mehr von diesem Provider. Deshalb können wir die Annahme
# dieser Karten von weiter entfernten Hops verweigern.
#
# C: server2.dyndns.org 12000 user4 pass4 no { 0:0:2, d22:4:1 }
# Verbindet zu einem CCcam-Server ohne den Emu des Servers mit zu benutzen.
# Es werden nur Karten angenommen, die höchstens 2 Hops entfernt sind.
# Es werden keine Karten mehr von d22:4 angenommen, die weiter als einen Hop entfernt sind.


# CCcam kann sich auch als Client zu anderen Cardservern verbinden
# Das bedeutet das sich CCcam auch von diesen Cardservern Karten abholen kann. CCcam kann aber selber keine
# Karten an diese Server geben.
#
# Dbox2 User müssen NewCS nutzen, um ihre Karte sharen zu können. Da CCcam nicht für Dbox2 geschrieben wurde
# können Karten in der Dbox nicht direkt von CCcam gelesen werden und somit muss dies NewCS übernehmen und die
# Karte dann an CCcam weiter leiten.
#
# Syntax zum Verbinden zu einem Newcamd/NewCS Server:
#
# N: <IP> <Port> <Username> <Passwort> <Description Key(14byte)> <Entfernung zur Karte in Hops (Standard: 1)> <Tarneinstellung (Standard: 0)>
#
# Beispiele:
#
#N: 127.0.0.1 10000 dummy dummy 01 02 03 04 05 06 07 08 09 10 11 12 13 14
#
# Hinzufügen einer Newcamd Karte, die 2 Hops entfernt ist, zur Shareliste:
#
#N: 127.0.0.1 10000 dummy dummy 01 02 03 04 05 06 07 08 09 10 11 12 13 14 2
#
# Als MGcamd getarnt am Newcamd Server anmelden:
#
#N: 127.0.0.1 10000 dummy dummy 01 02 03 04 05 06 07 08 09 10 11 12 13 14 1 1
#
# Tarneinstellungen: 0 = abgeschaltet, 1 = MGcamd neu, 2 = MGcamd alt, 3 = Evocamd, 4 = Generic


# Syntax zum Verbinden zu einem Radegast Server
#
# R: <IP> <Port> <caid> <pid> <Entfernung zur Karte in Hops (Standard: 1)>
#
# Beispiel:
#
#R: 127.0.0.1 678 0100 000080


# Syntax zum Verbinden zu einem Camd3 Server
#
# L: <IP> <Port> <Username> <Passwort> <caid> <pid> <Entfernung zur Karte in Hops (Standard: 1)>
#
# Beispiel:
#
#L: 127.0.0.1 567 dummy dummy 0100 000080


# Syntax zum Verbinden zu einem Gbox Server
#
# G: <eigenes Passwort> <eigener Hostname> <eigener Port> <Peer Passwort> <Peer Hostname> <Peer Port>
#
# Optional werden Begrenzungen genau wie in der C: Line unterstützt (Shares ignorieren,
# die mehr als X Hops entfernt sind) { caid:id(:uphops), caid:id(:uphops), ... }
#
# Beispiel:
#
#G: AABBCCDD ich.dyndns.org 2500 12345678 peer.dyndns.org 2500
#
# Die Verbindung zu einem Gbox-Server mit CCcam ist auf keinen Fall zu empfehlen. Das ganze läuft auf
# beiden Seiten extrem unstabil!

################################################## #################################
# Andere Konfigurationseinstellungen #
################################################## #################################

## SERVER LISTEN PORT Einstellung ##
# Port, den unser Server für eingehende Verbindungen nutzt.
# Beim Sharing über Internet muss dieser Port im Router an die IP unseres Servers weitergeleitet werden.
# CCcam verwendet TCP als Protokoll.
# Standard Port ist 12000, der Server lässt sich mit Parameter -s oder mit auf 0 gesetztem Port abschalten
#
#SERVER LISTEN PORT : 12000

## ALLOW TELNETINFO / ALLOW WEBINFO Einstellung ##
# Der Server kann einige Infos über verbundene Server, Clients und Karteninfos
# mit Hilfe von Telnet oder eines Webbrowsers ausgeben.
#
# Telnet und Webinfo an/aus schalten (yes = an, no = aus)
# Standard ist "yes"
#
#ALLOW TELNETINFO: no
#ALLOW WEBINFO: no

## SHOW EXTENEDED CLIENT INFO Einstellung ##
# Erweiterte Client-Info in der Client-Liste zeigen
# Standard ist "yes"
#
#SHOW EXTENEDED CLIENT INFO : no

## WEBINFO USERNAME / WEBINFO PASSWORD Einstellung ##
# Die Webinfo kann mit einem Benutzernamen und Passwort geschützt werden.
# Dies ist standardmäßig deaktiviert.
#
#WEBINFO USERNAME : <Benutzername>
#WEBINFO PASSWORD : <Passwort>

## TELNETINFO USERNAME / TELNETINFO PASSWORT Einstellung ##
# Die Telnetinfo kann mit einem Benutzernamen und Passwort geschützt werden.
# Dies ist standardmäßig deaktiviert.
#
#TELNETINFO USERNAME : <Benutzername>
#TELNETINFO PASSWORD : <Password>

## TELNET INFO LISTEN PORT / WEBINFO LISTEN PORT Einstellung ##
# Der Standard-Port für Telnetinfo ist 16000
# Der Standard-Port für die Webinfo ist 16001
# Unterstützte Kommandos:
# info
# activeclients
# clients
# servers
# shares
# providers
# entitlements
# Beispiele zur Nutzung:
# echo servers | telnet localhost 16000
# Öffne mit dem Browser: http://IP_des_CCcam-Servers:16001
#
#TELNETINFO LISTEN PORT : 16000
#WEBINFO LISTEN PORT : 16001

## ZAP OSD TIME Einstellung ##
# Zeit in Sekunden, in denen das On Screen Display aktiv ist.
# Im OSD werden auf dem Fernseher aktuelle Infos zur gerade verwendeten Karte angezeigt.
# Welcher Provider, welcher Peer, wie weit die Karte entfernt ist usw.
# Standard ist 0 (aus)
#
#ZAP OSD TIME : 3

## OSD USERNAME Einstellung ##
# Benutzername für das PopUp. Es ist identisch mit dem Passwort für das WebInterface eurer Box. (Standard : root)
#OSD USERNAME : root

## OSD PASSWORT Einstellung ##
# Passwort für das PopUp. Es ist identisch mit dem Passwort für das WebInterface eurer Box. (Standard : dreambox)
#OSD PASSWORD : dreambox

## OSD PORT Einstellung ##
# Port für das PopUP. (Standard : 80)
#OSD PORT : 80

## SERIAL READER Einstellung ##
# Cardreader Konfiguration
# Hier tragen wir alle, per seriell oder USB, angeschlossenen Cardreader ein.
# (nicht die internen Smartcardschächte des Receivers, die werden automatisch angesprochen)
# Optional kann der Readertype angegeben werden: phoenix,mouse,uniprog,sc8in1,smartreader+
# (wenn kein Readertype angegeben wird, so wird die Standardeinstellung "uniprog" gewählt (z.B. für Mastera))
#
# SERIAL READER : <Pfad zum Reader> <Readertyp>
#
# Beispiel:
#
#SERIAL READER : /dev/tts/0

## SMARTCARD WRITE DELAY Einstellung ##
# Schreibverzögerungseinstellung für die Smartcards.
# Hier lässt sich die Schreibgeschwindigkeit der Smartcards feintunen. Die optimale Einstellung ist abhängig
# von der Rechenleistung des Systems und der Rechenleistung der Smartcards.
# Der Standardwert wird berechnet, kann aber mit dieser Einstellung aufgehoben werden.
# Verzögerung in Millisekunden zischen den Bytes, 0 = keine Verzögerung, -1 = Standard berechnen
# Bemerkung: Es gibt einen großen Unterschied zwischen den Werten 0 und 1, wegen des tabellarischen Mehraufwandes.
#
# SMARTCARD WRITE DELAY : <Pfad zum Reader> <delay>
#
# Beispiel für 10ms Schreibverzögerung für die Karte die im Kartenleser /dev/ttyUSB0 steckt:
#
#SMARTCARD WRITE DELAY: /dev/ttyUSB0 10000
#
# Bemerkung zum SC8in1; Weil 8 Smartcards unter dem selben Pfad geführt werden, nutze
# Pfad_0 .. Pfad_7 für die Einstellung der einzelnen Smartcards.
# Beispiel: /dev/ttyS0_0, /dev/ttyS0_1 ..
# Beispiel für 8ms Schreibverzögerung zwischen den Bytes für die Smartcard im letztem Schacht des SC8in1,
# verbunden an /dev/tts/0:
#
#SMARTCARD WRITE DELAY: /dev/tts/0_7 8000

## SMARTCARD CLOCK FREQUENCY Einstellung ##
# Smartcard Taktfrequenz einstellen
# Nicht anpassen, wenn du nicht weißt was du tust.
# In 99% der Fälle wählt der Reader von sich aus die richtige Frequenz.
# Das Verändern dieser Einstellung kann die Karte langsamer machen, oder sie sogar zerstören.
#
# SMARTCARD CLOCK FREQUENCY : <device> <freq in Hz>
#
# Beispiel um die Karte in /dev/ttyUSB0 mit 5,5MHz laufen zu lassen:
#
#SMARTCARD CLOCK FREQUENCY: /dev/ttyUSB0 5500000

## SHOW TIMING Einstellung ##
# Anzeige der ECM-Zeiten im OSD und der Debug-Ausgabe
# Je schneller uns die ECM erreichen um so besser, mit dieser Einstellung können wir uns im OSD
# anzeigen lassen, wie lange das ECM gebraucht hat, um uns zu erreichen.
# Standard ist no (ausgeschaltet)
#
#SHOW TIMING : yes

## MINI OSD Einstellung ##
# Aktiviert das mini OSD, welches nur Server(Typ), Cardreader, Keys oder FTA zeigt.
# Standard ist no (ausgeschaltet)
#
#MINI OSD : yes

## DEBUG Einstellung ##
# Schaltet das Debugging an und aus
# Standard ist no (ausgeschaltet)
#
#DEBUG : yes

## NEWCAMD CONF Einstellung ##
# Soll CCcam versuchen die newcamd.conf für Serververbindungen zu lesen und zu analysieren?
# Standard ist no (ausgeschaltet)
#
#NEWCAMD CONF : yes

## B: Einstellung ##
# Hier kann man einstellen welchen EMM-Blocker man möchte. Dies lässt sich für jeden angeschlossenen
# internen und externen Kartenleser separat setzen.
# Standardmäßig werden keine EMM geblockt.
# EMMs (Entitlement Management Messages) sind Updates, die an unsere Karte gesendet werden. Zum Beispiel
# bei einem Keywechsel oder dem Zubuchen eines Pakets oder das Freischalten eines bestellten PPV Films.
#
# B: /dev/sci0 01
# 00 - nothing
# 01 - SA EMM werden geblockt (SA = shared addressed)
# 02 - UA EMM werden geblockt (UA = user addressed)
# 04 - GA EMM werden geblockt (GA = group addressed)
# Werte werden addiert, um verschieden EMM zu blocken. z.B. 01 + 02 = 03
# blockt SA und UA EMM.
#
# Beispiele:
#
#B: /dev/tts/0 07
#B: /dev/sci0 01

## DISABLE EMM Einstellung ##
# Mit dieser Einstellung lässt sich das lokale EMM-Lesen ganz abschalten.
# Das spart eine Menge CPU-Last, allerdings wird die Karte nun nicht mehr
# geupdated, oder nur noch von Clients, denen man in der F: Line die Erlaubnis
# dazu erteilt hat.
# Es ist auf jeden Fall sehr sinnvoll dies in einem reinem Server, welcher eh nicht
# über einen Sat/Kabelanschluss verfügt, zu setzen.
#
# Standard: no
#
#DISABLE EMM : yes

## EXTRA EMM LEVEL Einstellung ##
# Mit dieser Einstellung erlaubt man Clients, die 2 Hops
# weit weg sind Updates an unsere Karte zu senden.
# Wird eigentlich nicht benötigt. Macht nur unnötig Traffic und ist auch ein Sicherheitsrisiko,
# da unsere Cardserial zum Updaten an den Peer übertragen wird.
#
# Standard : no
#
#EXTRA EMM LEVEL : yes

## EMM THREADS Einstellung ##
# Mit dieser Einstellung lässt sich konfigurieren wie viele EMM-Listener
# gestartet werden.
# Man benötigt 2, wenn man z.B. eine DM 7025 mit Twintuner betreibt und
# einen verschlüsselten Kanal schaut und einen weiteren aufzeichnen möchte.
# Allerdings ist dies nur wichtig, wenn die genutzte Karte permanent EMM
# benötig. Aktuell ist mir keine Karte bekannt die dies braucht.
#
# Standard : 1
#
#EMM THREADS : 1

## BOXKEY Einstellung ##
# NDS Boxkey ersetzen (4 Byte Hex)
# Einige NDS-Videoguard Karten laufen nur in der dafür vorgesehen Box.
# CCcam kann der Karte diesen Receiver vortäuschen. Dafür benötigt man
# einen Boxkey.
# Sky Deutschland und KabelBW NDS Karten besitzen diese Sperre noch nicht.
#
# BOXKEY: <Pfad zum Reader> <Byte1> <Byte2> <Byte3> <Byte4>
#
# Beispiel:
#
#BOXKEY: /dev/sci0 00 11 22 33

## PIN Einstellung ##
# Karten PIN für Cryptoworks-Karten setzen. (Jugendschutz PIN)
# Funktioniert aber nicht bei ArenaSat
# * Achtung: Dies kann die Karte sperren! *
#
# PIN: <Pfad zum Reader> <PIN>
#
# Beispiel:
#
#PIN: /dev/sci0 1234

## CAMKEY Einstellung ##
# Ersetzen des Irdeto Camkeys (8 Byte Hex), Standard ist 11 22 33 44 55 66 77 88
#
# CAMKEY: <Pfad zum Reader> <Byte1> <Byte2> <Byte3> <Byte4> <Byte5> <Byte6> <Byte7> <Byte8>
#
# Beispiel:
#
#CAMKEY: /dev/sci0 11 22 33 44 55 66 77 88

## CAMDATA Einstellung ##
# Ersetzen der Irdeto Camdata (64 Byte Hex)
# Null-Bytes am Ende können weggelassen werden.
# Standard für unbekannte ASCs ist 11 22 33 44 55 66 77 88 00 00 .. 00, bekannte ASCs haben andere Standards.
#
# CAMDATA: <Pfad zum Reader> <Byte1> <Byte2> <Byte3> <Byte4> <Byte5> <Byte6> ... <Byte64>
#
# Beispiel, wenn nur die ersten 15 Bytes der Camdata aus nicht nuller Blöcken bestehen:
#
#CAMDATA: /dev/sci0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff

## BEEF ID Einstellung ##
# Spezielles setzen der IDs für BEEF gepatchte Karten
#
# BEEF ID: <Ident1> <Ident2> <Ident3> <Ident4> <Ident5> <Ident6> <Ident7> <Ident8> <Pfad zum Reader>
#
# Beispiel:
#
#BEEF ID: 4101 0 0 0 0 0 0 0 /dev/sci0

## SOFTKEY FILE Einstellung ##
# Wo befindet sich die SoftCam.Key Datei?
# In dieser Datei werden Keys für die Sender eingetragen, welche zur Zeit auch durch den
# in CCcam integrierten Softcam-Emu entschlüsselt werden können.
# Die Datei ist für den Betrieb von CCcam als Cardsharing-Emu nicht zwingend erforderlich,
# sollte aber genutzt werden, um das Netz zu entlasten. Denn für Sender, welche durch die
# Datei geöffnet werden gehen keine Anfragen ins CS-Netz.
#
# Standard: /var/keys/SoftCam.Key
#
#SOFTKEY FILE : /var/keys/SoftCam.Key

## AUTOROLL FILE Einstellung ##
# Wo befindet sich die AutoRoll.Key Datei?
# In dieser Datei werden sogenannte AU-Keys (Auto Update) eingetragen. Sofern funktionierende
# AU-Keys vorhanden sind wird bei einem Keywechsel der neue Key automatisch aus dem Sat- bzw.
# Kabelstream entschlüsselt und in die SoftCam.Key Datei eingetragen.
# Diese Datei ist für den Betrieb von CCcam nicht zwingend erforderlich.
#
# Standard: /var/keys/AutoRoll.Key
#
#AUTOROLL FILE : /var/keys/AutoRoll.Key

## STATIC CW FILE Einstellung ##
# Wo befindet sich die constant.cw Datei?
# In dieser Datei werden sogenannte CW-Keys eingetragen. Diese Keys tauchen immer mal wieder
# auf, halten aber normalerweise nie länger als ein paar Stunden. Normalerweise werden zum
# entschlüsseln eines Senders ca. alle 10sek ein neues ControlWord (CW) berechnet. Durch einen
# Fehler im System des PayTV-Providers kann es dazu kommen, dass dies nicht geschieht und ein
# CW länger gültig bleibt. Und das so lange bis es bemerkt wird und/oder der Server beim Provider
# neu gestartet wird.
# Diese Datei ist für den Betrieb von CCcam nicht zwingend erforderlich.
#
# Standard: /var/keys/constant.cw
#
# Inhalt des Files kann so aussehen:
#
# ca4:id6:sid4:pmtpid4:ecmpid4:key16(01 02 03...)
#
#STATIC CW FILE : /var/keys/constant.cw

## CAID PRIO FILE Einstellung ##
# Wo befindet sich die CCcam.prio Datei?
# In dieser Datei lässt sich konfigurieren, welche CAIDs CCcam bevorzugen oder ignorieren soll.
# Seit Version 2.0.8 ist dieses File fast nicht mehr notwendig, aber es kann die Umschaltzeiten
# bei einigen Provider enorm verkürzen. In Version 2.0.10 und 2.0.11 ist die Sharelogik noch einmal
# deutlich verbessert worden. Allerdings deutlich zu Lasten des Netzwerk-Traffics.
#
# Standard: /var/etc/CCcam.prio
# Der Dateiinhalt kann Ignores (I) und Prio (P) Listen enthalten.
#
# Bemerkung 1: I: Lines betreffen ECM und EMM (es kommen keine EMM vom ignoriertem System an)
# P: Lines betreffen nur die ECM Auswahl (EMM werden weiter für alle vorhandenen Systeme empfangen
# und nicht nur für das bevorzugte System)
#
# Bemerkung 2: Ident 0 bedeutet 'alle Idents'. Also ist 'caid:0' das Selbe wie 'caid'.
#
# Bemerkung 3: Für einige Systeme (z.B. Nagra (CAID 18xx)), ist die Ident zu der Zeit wo die Prio-Liste
# geprüft wird nicht bekannt. In diesem Fall wird der Abgleich nur auf der CAID durchgeführt.
# Selbst dann, wenn die P: Line nicht genullte Idents bestimmt.
# Also verhält sich z.B '1801:401' genau wie '1801' in einer P: Line.
# I: Lines arbeiten anders. Sie werden zwei mal geprüft. Ein mal bevor das ECM oder EMM empfangen
# wird und einmal danach. (und die Nagra Ident sollte bekannt sein)
# P: lines werden nur einmal geprüft, bevor ECM empfangen werden.
#
# Bemerkung 4: Wenn eine P: Line CAID:Ident Paarungen enthält, welche nicht für den derzeitigen Kanal
# verfügbar sind, wird diese P: Line nicht für den derzeitigen Kanal genutzt.
# Beispiel: Der Kanal hat das System 626, 1801:401, dann wird die P: Line mit "1801,100:96,626"
# von diesem Kanal ignoriert, weil dieser Kanal nicht die 100:96 hat.
# Aber die P: Line mit "1801" wird genommen und auch die "626,1801" wird für diesen Kanal genommen.
#
# Bemerkung 5: P: Lines sind abhängig von der Reihenfolge in der sie sich in der Datei befinden.
# Nur die erste passende P: Line wird genutzt.
#
# Bemerkung 6: Mit I: Lines werden bestimmte CAIDs für die eigene Nutzung ignoriert. Das bedeutet aber nicht, dass
# diese CAIDs nun nicht mehr im Share vorhanden sind. Sie werden trotzdem angenommen und auch weiter
# gegeben. I: Lines eignen sich also nicht zum Aussortieren von alten, nicht mehr aktiven Providern
# und Fakekarten. Das macht man am besten direkt am Ende jeder C: Line.
#
# Bemerkung 7: Eine Prio erstellt man auf die eigenen Bedürfnisse. Fertige Prios, wie sie in vielen Foren und ULCs
# angeboten werden, können mehr schaden als das sie nutzen. Deshalb sollte jeder, der mit der Kartenauswahl
# seiner CCcam unzufrieden ist, sich selbst mit der Erstellung seiner Prio befassen. Dabei ist zu beachten
# das die Prio möglichst klein gehalten wird und nur wirklich notwendige Einstellungen gemacht werden.
# Je mehr in einer Prio steht, um so mehr muss CCcam auch abarbeiten.
#
# Situation 1: Ignoriert immer diese CAID, alle Idents, auf allen Kanälen.
# I: caid
#
# Situation 2: Ignoriert immer diese CAID/Ident Paarung.
# I: caid:ident
#
# Situation 3: Ignoriert diese CAID/Ident Paarung auf diesem Kanal 'SID'.
# I: caid:ident:sid
#
# Situation 4: Wenn CAID1 und CAID2 auf einem Kanal existieren wird CAID1 bevorzugt.
# P: caid1, caid2
#
# Situation 5: Wenn CAID1:Ident1 bis CAIDX:IdentX auf einem Kanal exestieren, werden sie in
# der Reihenfolge der Liste genutzt.
# P: caid1:ident1, caid2:ident2, .., caidX:identX
#
# Situation 6: Wenn CAID1:Ident1 bis CAIDX:IdentX auf dem Kanal 'SID' existieren, werden sie in
# der Reihenfolge der Liste genutzt.
# Die SID auf der ersten CAID/Ident Paarung kennzeichnet welche SID für diese Liste
# genutzt wird. Alle anderen SIDs ignorieren diese Liste.
# P: caid1:ident1:sid, caid2:ident2, .., caidX:identX
#
#CAID PRIO FILE : /var/etc/CCcam.prio

## PROVIDERINFO FILE Einstellung ##
# Wo befindet sich die CCcam.providers Datei?
# In dieser Datei werden die Provider bestimmt. Sie ist für den Betrieb von CCcam nicht notwendig.
# Die Infos in dieser Datei werden für das CCcam-Webinterface genutzt, um in der Liste die
# Karten mit dem dazu passenden Providernamen anzuzeigen.
#
# Format:
# <caid><ident> "Provider-Bezeichnung"
#
#PROVIDERINFO FILE : /var/etc/CCcam.providers

## CHANNELINFO FILE Einstellung ##
# Wo befindet sich die CCcam.channelinfo Datei?
# In dieser Datei werden die Kanäle bestimmt. Sie ist für den Betrieb von CCcam nicht notwendig.
# Die Infos in dieser Datei werden für das CCcam-Webinterface genutzt.
#
# Format:
# caid:ident:sid "Kanal-Bezeichnung"
#
#CHANNELINFO FILE : /var/etc/CCcam.channelinfo

## LOG WARNINGS Einstellung ##
# Falsche Logins in einer Datei eintragen.
# In dieser Datei kann man nachlesen ob nicht berechtigte User versucht haben sich zu uns zu verbinden.
# Geht natürlich zu Lasten der Performance und sollte nur gelegentlich aktiviert werden.
# Im Standard ist dies ausgeschaltet.
#
#LOG WARNINGS : /tmp/warnings.txt

## NEWCAMD STEALTH Einstellung ##
# Allgemeine Einstellung für die als anderer Emu getarnte Verbindung zu Newcamd/NewCS Servern.
# Die Einstellung in der N: Line wird bevorzugt.
# Tarneinstellung: 0 = ausgeschaltet, 1 = MGcamd neu, 2 = MGcamd alt, 3 = Evocamd, 4 = Generic
#
# Standard: 0
#
#NEWCAMD STEALTH : 0

## LOADBALANCE Einstellung ##
# Ladebalance zwischen identischen Karten. Es werden die Pfade der Kartenleser aufgelistet,
# die identische Karten enthalten, optional gefolgt von einer Liste mit Service IDs welche
# vom Balancieren ausgenommen sind.
#
# LOADBALANCE : <Pfad zum Reader1> <Pfad zum Reader2> .. <Pfad zum ReaderX> { <ausgenommene SID1>, <ausgenommene SID2> .. , <ausgenommene SIDX> }
#
# Mehrere Loadbalance Gruppen können konfiguriert werden, durch hinzufügen mehrerer Lines.
# Warnung: Neustart ist erforderlich, wenn Loadbalance-Gruppen-Konfiguration geändert wurde.
#
# Beispiel 1: Ladebalance Abfrage für drei identische Karten.
#
#LOADBALANCE : /dev/ttyS0 /dev/ttyS1 /dev/ttyS2
#
# Beispiel 2: Ladebalance Anfrage für zwei fast identische Karten, SID 0df3 und 0de1 sind nur auf
# einer der Karten verfügbar, also sollten Anfragen an diese SIDs nicht balanciert werden.
#
#LOADBALANCE : /dev/ttyS5 /dev/ttyS6 { 0df3,0de1 }

## MINIMUM CLIENT VERSION Einstellung ##
# In Version 1.2.1 und frühere Versionen haben ein Problem was dazu führen kann,
# das die Verbindung zu Clients abgebrochen wird.
# In Version 1.4.0 wurde die Netzwerkbelastung deutlich reduziert.
# In version 1.7.0 wurde ein gefährlicher Password-Bug behoben.
# ...
# In Version 2.0.5 wurde das Karten-Faken, mit Hilfe von anderen Emus, gesperrt.
#
# Aufgrund der vielen Erneuerungen sollten User mit alten Versionen zu aktuellen Versionen wechseln.
# Mit dieser Einstellung kann man Usern, die eine alte CCcam Version nutzen, die Probleme verursachen kann,
# den Zugang zu unserem Server verweigern.
#
# Standard: alle Versionen zugelassen
#
# Beispiel: alle Versionen vor 1.7.0 werden geblockt
#
#MINIMUM CLIENT VERSION : 1.7.0
#
# VORSICHT: Mit mit der Version 2.0.10 ist es zu folgendem Problem gekommen: Diese Version wird als 2.0.1 erkannt
# und somit können sich diese Peers nicht mehr zu uns verbinden, wenn wir das Minumum auf einen Wert
# höher als 2.0.1 stellen. Das bedeutet bei eingestellter "MINIMUM CLIENT VERSION : 2.0.2" bis
# "MINIMUM CLIENT VERSION : 2.0.9" können sich 2.0.1x Server nicht mehr zu uns verbinden.
# Seit CCcam 2.1.1 sind alle Probleme mit dieser Einstellung wieder behoben worden.

## TRY ALL CHIDS Einstellung ##
# Irdeto Smartcards: Option um das "smart ChannelID checking" für Irdeto Smartcards abzuschalten.
# Standard: Nur ChannelIDs die von der Karte angegeben werden, werden akzeptiert.
# Dies bedeutet viel unerwünschten Datenverkehr für die Karte.
#
# Doch wenn die Smartcard versteckte/unbekannte Chids hat, sollten alle Chids probiert werden.
# In diesem Fall ist die 'TRY ALL CHIDS' Option für den Cardreader zu setzen.
# Dies ist mit Bedacht zu nutzen, da das Aktivieren dieser Option mehr Card Traffic bedeutet.
# Diese Einstellung nur nutzen, wenn einige Kanäle nicht funktionieren.
# Bemerkung: Wenn auch diese Einstellung nicht hilft alle Kanäle zu entschlüsseln, versuche das
# Kommandozeilen Argument -l zu nutzen, um alle Selbstlern-Features zu deaktivieren (Warnung: langsamer)
#
# TRY ALL CHIDS : <Pfad zum Reader>
#
# Beispiel: Die Karte in /dev/ttyUSB0 bekommt ECM für alle möglichen CHIDs, nicht
# nur die CHIDs die sie offiziell unterstützt.
#
#TRY ALL CHIDS : /dev/ttyUSB0

## POSTINIT Einstellung ##
# Ausführen von Smartcard Post Init Kommandos
#
# POSTINIT : <Pfad zum Reader> <Dateiname> (<autodelete>)
#
# Sendet Komandos aus 'Dateiname' zum 'Pfad zum Reader' und löscht 'filename' wenn das optionale
# 'autodelete' nicht genullt ist.
#
# Beispiel:
#
#POSTINIT : /dev/sci0 /tmp/postinit
#
# Beispiel für den Inhalt in /tmp/postinit:
# c134000003000000
# c13201000a

## DVB API Einstellung ##
# Option zum Überschreiben der automatisch erkannten DVB-API-Version. Neustart erforderlich.
#
# DVB API: <Wert>
#
# <Wert> <1 = kein DVB, 1 = DVB API 1, 3 = DVD API 3>
#
# Warnung: Nur nutzen wenn die automatische Erkennung fehlgeschlagen ist!
#
# Beispiel für das Abschalten nicht laufender DVB-Hardware:
#DVB API: -1

## GLOBAL LIMITS Einstellung ##
# Option um die allgemeinen Share-Begrenzungen zu setzen.
# Hier lässt sich in einem Abwasch erledigen, was sonst hinter jede F: Line gesetzt werden müsste.
# z.B. die Reshare-Begrenzung für unsere Karten.
#
# GLOBAL LIMITS: { caid:id(:downhops), caid:id(:downhops), ... }
#
# Beispiel:
#
#GLOBAL LIMITS : { 0100:000080, 0622:000000:1, 0500:000000:2 }
#
# Alle Peers bekommen nicht die 0100:000080 Karten
# und alle 0622:000000 Karten nur für sich selbst (1 hop down)
# und 0500 Karten für sich, plus einen zusätzlichen Hop weiter.
# Die allgemeinen Begrenzungen werden von den clientspezifische Begrenzungen außer Kraft gesetzt
# (siehe Beischreibung zur F: Line)

## MINIMUM DOWNHOPS ##
# Option um Karten mit geringem Reshare auszusortieren.
#
# MINIMUM DOWNHOPS: <Wert>
#
# Standard: 0 (ignoriert keine Karten)
#
# Beispiel:
#
#MINIMUM DOWNHOPS: 1
#
# Ignoriert alle Karten, die nicht mehr an andere Peers weiter geshared werden können.
# Sinnvoll für Server, auf denen eh kein Fernsehen geschaut wird oder
# auch eine einfache Art zu begrenzen, wenn man zu viele Karten bekommt.

##################
# ab CCcam 2.1.0 #
##################

## IGNORE NODE Einstellung ##
# Einstellung für das Ignorieren aller Karten von bestimmten Peers,
# welche nicht unbeding direkt mit uns verbunden sein müssen.
# Mit dieser Eistellung lassen sich nun auch Karten von Peers ignorieren, welche unseren Share stören.
# Dies können z.B. RSA-Karten wie die Anaconda oder Minerva sein, welche immer noch auf
# auf Anfragen antworten und somit einen schwarzen Bildschirm bei uns verursachen, oder aber auch
# ständig überlastete Peers oder Karten die zwar korrekt antworten, aber dauernd Bildaussetzer
# verursachen.
#
# Für diese Einstellung benötigen wir die zur schlechten Karte/Peer dazugehörige NodeID.
# Diese finden wir in der Datei "Ecm.info" im Ordner /tmp, die wir auslesen, wenn unser Share gestört wird.
#
# Leider ist die NodeID nicht statisch. Bei einem Neustart des Systems wird jedes mal eine neue generiert.
# Deshalb sind erstellte IGNORE NODE Lines nicht lange gültig.
#
# IGNORE NODE: <NodeID>
#
# Beispiel für das Ignorieren zweier NodeIDs:
#
#IGNORE NODE: ccd536ab515767ad
#IGNORE NODE: aad536ab515761af

## SECA HANDLER Einstellung ##
# Der SECA Handler wird genutzt, um die Kartenauswahl auf Providern, welche SECA2 und SECA3 gleichzeitig
# über die selbe Ident nutzen, zu verbessern.
#
# Mit dieser Einstellung lässt sich das Verhalten beeinflussen, wie SECA genutzt werden sollen.
# Diese Einstellung wird ignoriert, so lange nicht SECA2/SECA3 simulcrypt erkannt wird!!
#
# Wenn es abgeschatet ist, dann verhält sich CCcam wie in den Versionen vor 2.1.0.
#
# Wenn SECA3 vor SECA2 bevorzugt wird, dann wird versuch erst SECA3 ECM zu verwenden und dann erst SECA2.
#
# Wenn SECA2 vor SECA3 bevorzugt wird, dann wird versuch erst SECA2 ECM zu verwenden und dann erst SECA3.
#
# Wenn SECA2 ignoriert wird, dann werden keine Anfragen mehr an SECA2 Karten mehr gestellt,
# welche nicht verarbeitet werden können.
#
# Wenn SECA3 ignoriert wird, dann werden keine Anfragen mehr an SECA3 Karten mehr gestellt,
# welche nicht verarbeitet werden können.
#
# Folgende Einstellungen können genutzt werden:
#
# SECA HANDLER: <Wert>
# <Wert> : 0 = abgeschaltet, 1 = bevorzugt SECA3 vor SECA2, 2 = bevorzugt SECA2 vor SECA3, 3 = ignoriert SECA2, 4 = ignoriert SECA3
#
# Standard: 1
#
# Beispiel 1: Erst wird SECA3 ECM, dann SECA2 versucht
#
#SECA HANDLER: 1
#
# Beispiel 2: Erst wird SECA2 ECM, dann SECA3 versucht
#
#SECA HANDLER: 2
#
# Beispiel 3: Alle SECA2 ECM werden ignoriert, so das SECA3 Karten keine SECA2 Anfragen bekommen,
# welche sie nicht verarbeiten können.
#
#SECA HANDLER: 3
#
# Beispiel 4: Alle SECA3 ECM werden ignoriert, so das SECA2 Karten keine SECA3 Anfragen bekommen,
# welche sie nicht verarbeiten können.
#
#SECA HANDLER: 4
#
# Beispiel 4: Seca Handler ist abgeschaltet
#SECA HANDLER: 0

##################
# ab CCcam 2.1.2 #
##################

## SMARTCARD SID ASSIGN Einstellung ##
# Hier lässt sich nun endlich einstellen, welche SIDs unsere lokalen Karte(n) erhellen können, oder dürfen
# sollen. Dies reduziert den Traffic zur Karte und macht somit den Share schneller und reduziert
# Freezer, die durch überlastete Karten entstehen.
#
# JEDER SOLLTE SICH DIE ZEIT NEHMEN UND SEINE KARTE(N) MIT DIESER EINSTELLUNG KONFIGURIEREN!
#
# Wenn keine Einstellungen vorgenommen werden, werden alle SIDs zugelassen.
# (Es kann zusammen mit der LOADBALACE Einstellung (siehe oben),
# oder für Einzelkarten genutzt werden)
#
# SMARTCARD SID ASSIGN : <Pfad zum Reader> <Maximale Anzahl zugelassener SIDs> { <SID1>, <SID2>, ... <SIDn> }
#
# <Maximale Anzahl zugelassener SIDs> = begrenzt die Anzahl unterschiedlicher SIDs, für die Anfragen
# an die Karte gesendet werden (0 = erlaubt alle SIDs aus der SID Liste)
# { <SID1>..<SIDn> } = Diese SID Liste gibt an, für welche SIDs Anfragen an unsere Smartcard
# zugelassen werden. Wenn die Liste weg gelassen wird, dann werden alle SIDs zugelassen, bis die
# <Maximale Anzahl zugelassener SIDs> erreicht ist.
#
# Wenn <Maximale Anzahl zugelassener SIDs> größer ist, als die Anzahl der SIDs in der SID Liste,
# dann werden die weiteren SIDs automatisch gewählt, bis das Limit ereicht ist.
#
# Die Einstellungen könen im WebIF und der TelnetInfo von CCcam unter Entitlements eingesehen werden.
#
# Warnung: Wenn die SMARTCARD SID ASSIGN Einstellungen verändert wurden, ist ein Neustart von CCcam
# erforderlich, damit die Veränderungen übernommen werden.
#
# Beispiel 1: Die Smartcard im Reader /dev/ttyUSB0 bearbeitet nur Anfragen für die SIDs:
# df3, df4, df5
#
#SMARTCARD SID ASSIGN : /dev/ttyUSB0 0 { 0df3,0df4,0df5 }
#
# Beispiel 2: Die Smartcard im Reader /dev/ttyUSB0 bearbeitet nur Anfragen für maximal 5 SIDs
# gleichzeitig. Eine Anfrage für eine sechste SID wird abgewiesen. Welche SIDs dies sind wird
# automatisch über die Reihenfolge der Anfragen ausgewählt.
#
#SMARTCARD SID ASSIGN : /dev/ttyUSB0 5
#
# Beispiel 3: Die Smartcard im Reader /dev/ttyUSB0 bearbeitet nur Anfragen für maximal 5 SIDs
# gleichzeitig, 3 von ihnen sind fest gesetzt (hier: df3, df4 und df5), die restlichen 2 werden
# automatisch zugewiesen.
#
#SMARTCARD SID ASSIGN : /dev/ttyUSB0 5 { 0df3,0df4,0df5 }

