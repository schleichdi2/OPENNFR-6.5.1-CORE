From 3ef14ce7d8f8cd2b57287dc40a407059c8459726 Mon Sep 17 00:00:00 2001
From: Captain <captain.onboard@web.de>
Date: Sun, 22 Aug 2021 09:56:30 +0200
Subject: [PATCH] Revert "Linux: Use 32-bit vDSO for clock_gettime,
 gettimeofday, time (BZ# 28071)"

---
 sysdeps/unix/sysv/linux/Makefile              |  6 --
 sysdeps/unix/sysv/linux/clock_gettime.c       | 51 ++++-------------
 .../sysv/linux/tst-clock_gettime-clobber.c    | 57 -------------------
 .../sysv/linux/tst-gettimeofday-clobber.c     | 37 ------------
 sysdeps/unix/sysv/linux/tst-time-clobber.c    | 36 ------------
 5 files changed, 12 insertions(+), 175 deletions(-)
 delete mode 100644 sysdeps/unix/sysv/linux/tst-clock_gettime-clobber.c
 delete mode 100644 sysdeps/unix/sysv/linux/tst-gettimeofday-clobber.c
 delete mode 100644 sysdeps/unix/sysv/linux/tst-time-clobber.c

diff --git a/sysdeps/unix/sysv/linux/Makefile b/sysdeps/unix/sysv/linux/Makefile
index 76ad06361c..4b40cb7210 100644
--- a/sysdeps/unix/sysv/linux/Makefile
+++ b/sysdeps/unix/sysv/linux/Makefile
@@ -229,12 +229,6 @@ ifeq ($(subdir),time)
 sysdep_headers += sys/timex.h bits/timex.h
 
 sysdep_routines += ntp_gettime ntp_gettimex
-
-tests += \
-  tst-clock_gettime-clobber \
-  tst-gettimeofday-clobber \
-  tst-time-clobber \
-  # tests
 endif
 
 ifeq ($(subdir),signal)
diff --git a/sysdeps/unix/sysv/linux/clock_gettime.c b/sysdeps/unix/sysv/linux/clock_gettime.c
index 91df6b3d96..cfe9370455 100644
--- a/sysdeps/unix/sysv/linux/clock_gettime.c
+++ b/sysdeps/unix/sysv/linux/clock_gettime.c
@@ -35,54 +35,27 @@ __clock_gettime64 (clockid_t clock_id, struct __timespec64 *tp)
 #endif
 
 #ifdef HAVE_CLOCK_GETTIME64_VSYSCALL
-  int (*vdso_time64) (clockid_t clock_id, struct __timespec64 *tp)
-    = GLRO(dl_vdso_clock_gettime64);
-  if (vdso_time64 != NULL)
-    {
-      r = INTERNAL_VSYSCALL_CALL (vdso_time64, 2, clock_id, tp);
-      if (r == 0)
-	return 0;
-      return INLINE_SYSCALL_ERROR_RETURN_VALUE (-r);
-    }
+  r = INLINE_VSYSCALL (clock_gettime64, 2, clock_id, tp);
+#else
+  r = INLINE_SYSCALL_CALL (clock_gettime64, clock_id, tp);
 #endif
 
-#ifdef HAVE_CLOCK_GETTIME_VSYSCALL
-  int (*vdso_time) (clockid_t clock_id, struct timespec *tp)
-    = GLRO(dl_vdso_clock_gettime);
-  if (vdso_time != NULL)
-    {
-      struct timespec tp32;
-      r = INTERNAL_VSYSCALL_CALL (vdso_time, 2, clock_id, &tp32);
-      if (r == 0 && tp32.tv_sec > 0)
-	{
-	  *tp = valid_timespec_to_timespec64 (tp32);
-	  return 0;
-	}
-      else if (r != 0)
-	return INLINE_SYSCALL_ERROR_RETURN_VALUE (-r);
-
-      /* Fallback to syscall if the 32-bit time_t vDSO returns overflows.  */
-    }
-#endif
-
-  r = INTERNAL_SYSCALL_CALL (clock_gettime64, clock_id, tp);
-  if (r == 0)
-    return 0;
-  if (r != -ENOSYS)
-    return INLINE_SYSCALL_ERROR_RETURN_VALUE (-r);
+  if (r == 0 || errno != ENOSYS)
+    return r;
 
 #ifndef __ASSUME_TIME64_SYSCALLS
   /* Fallback code that uses 32-bit support.  */
   struct timespec tp32;
-  r = INTERNAL_SYSCALL_CALL (clock_gettime, clock_id, &tp32);
+# ifdef HAVE_CLOCK_GETTIME_VSYSCALL
+  r = INLINE_VSYSCALL (clock_gettime, 2, clock_id, &tp32);
+# else
+  r = INLINE_SYSCALL_CALL (clock_gettime, clock_id, &tp32);
+# endif
   if (r == 0)
-    {
-      *tp = valid_timespec_to_timespec64 (tp32);
-      return 0;
-    }
+    *tp = valid_timespec_to_timespec64 (tp32);
 #endif
 
-  return INLINE_SYSCALL_ERROR_RETURN_VALUE (-r);
+  return r;
 }
 
 #if __TIMESIZE != 64
diff --git a/sysdeps/unix/sysv/linux/tst-clock_gettime-clobber.c b/sysdeps/unix/sysv/linux/tst-clock_gettime-clobber.c
deleted file mode 100644
index 81a32bd15a..0000000000
--- a/sysdeps/unix/sysv/linux/tst-clock_gettime-clobber.c
+++ /dev/null
@@ -1,57 +0,0 @@
-/* Check that clock_gettime does not clobber errno on success.
-   Copyright (C) 2021 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <errno.h>
-#include <time.h>
-#include <support/check.h>
-#include <stdio.h>
-
-static void
-test_clock (clockid_t clk)
-{
-  printf ("info: testing clock: %d\n", (int) clk);
-
-  for (int original_errno = 0; original_errno < 2; ++original_errno)
-    {
-      errno = original_errno;
-      struct timespec ts;
-      if (clock_gettime (clk, &ts) == 0)
-        TEST_COMPARE (errno, original_errno);
-    }
-}
-
-static int
-do_test (void)
-{
-  test_clock (CLOCK_BOOTTIME);
-  test_clock (CLOCK_BOOTTIME_ALARM);
-  test_clock (CLOCK_MONOTONIC);
-  test_clock (CLOCK_MONOTONIC_COARSE);
-  test_clock (CLOCK_MONOTONIC_RAW);
-  test_clock (CLOCK_PROCESS_CPUTIME_ID);
-  test_clock (CLOCK_REALTIME);
-  test_clock (CLOCK_REALTIME_ALARM);
-  test_clock (CLOCK_REALTIME_COARSE);
-#ifdef CLOCK_TAI
-  test_clock (CLOCK_TAI);
-#endif
-  test_clock (CLOCK_THREAD_CPUTIME_ID);
-  return 0;
-}
-
-#include <support/test-driver.c>
diff --git a/sysdeps/unix/sysv/linux/tst-gettimeofday-clobber.c b/sysdeps/unix/sysv/linux/tst-gettimeofday-clobber.c
deleted file mode 100644
index bb9bdb67b0..0000000000
--- a/sysdeps/unix/sysv/linux/tst-gettimeofday-clobber.c
+++ /dev/null
@@ -1,37 +0,0 @@
-/* Check that gettimeofday does not clobber errno.
-   Copyright (C) 2021 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <errno.h>
-#include <stddef.h>
-#include <support/check.h>
-#include <sys/time.h>
-
-static int
-do_test (void)
-{
-  for (int original_errno = 0; original_errno < 2; ++original_errno)
-    {
-      errno = original_errno;
-      struct timeval tv;
-      gettimeofday (&tv, NULL);
-      TEST_COMPARE (errno, original_errno);
-    }
-  return 0;
-}
-
-#include <support/test-driver.c>
diff --git a/sysdeps/unix/sysv/linux/tst-time-clobber.c b/sysdeps/unix/sysv/linux/tst-time-clobber.c
deleted file mode 100644
index ad83be9be8..0000000000
--- a/sysdeps/unix/sysv/linux/tst-time-clobber.c
+++ /dev/null
@@ -1,36 +0,0 @@
-/* Check that time does not clobber errno.
-   Copyright (C) 2021 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, see
-   <https://www.gnu.org/licenses/>.  */
-
-#include <errno.h>
-#include <stddef.h>
-#include <support/check.h>
-#include <time.h>
-
-static int
-do_test (void)
-{
-  for (int original_errno = 0; original_errno < 2; ++original_errno)
-    {
-      errno = original_errno;
-      time (NULL);
-      TEST_COMPARE (errno, original_errno);
-    }
-  return 0;
-}
-
-#include <support/test-driver.c>
-- 
2.33.0.windows.1

